// main.cpp

/*

Project 8: Part 1/1
video: Chapter 4 Part 6

Purpose:  This project will teach you more about casting across class hierarchies as well as range-based for() loops, and issues that come with inheritance.

Create a branch named Part1

Public vs. Protected vs Private & Friend

Build/Run often with this task to make sure you're not breaking the code with each step.
    I recommend committing after you get each step working so you can revert to a working version easily if needed.
    it's very easy to mess this task up. 

your task: 
    0) get familiar with the classes. 

    1) Fix the include errors. 

    2) HighwayPatrol can check the speed of vehicles on the highway. 
        make this happen without adding getters to the Highway or Vehicle class

    3) implement the Highway::addVehicleInternal 
        this function should call the non-evasive member function of the derived class, so use the technique shown in the Casting video.

    4) implement the Highway::removeVehicleInternal
        this function should call the evasive member function of the derived class, if it has one. use the technique shown in the Casting video.

    5) Add a Truck type
        semi-trucks don't evade when they're pulled over, unlike cars and motorcycles.  

    6) Add some Cars to the Highway
    7) Add some Motorcycles to the Highway
    8) Add some SemiTrucks to the highway. 

    9) clear any warnings as best you can, based on what you've learned in the previous projects
        see the note in main() about implementing the special member functions.
        This will clear a lot of warnings if implemented correctly.

 Commit your changes by clicking on the Source Control panel on the left, entering a message, and click [Commit and push].
 
Make a pull request after you make your first commit and pin the pull request link to our DM thread.

send me a DM to check your pull request

 Wait for my code review.
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

#include "Highway.h"
#include "HighwayPatrol.h"
#include "Car.h"
#include "Motorcycle.h"
#include "SemiTruck.h"

int main()
{
    Highway highway;
    
    std::vector<Car> cars;
    std::vector<Motorcycle> motorcycles;
    std::vector<SemiTruck> trucks;
    
    /*
     instantiating vectors like this creates unexpected copies during the construction process:
     
     std::vector<std::string> strings
     {
        std::string("a string"),
        std::string("another string)"
     };
     
     We have not learned how to properly implement copy constructors or copy assignment operators yet at this point in the course.
     These functions are part of the group of special member functions that all UDTs have.
     
     Instead we will learn about in-place construction to avoid making unexpected copies of our UDTs.
     Unexpected copies could cause Undefined Behavior (UB)
     The rule of 3-5-0 video will explain these special member functions and this UB in more detail.
     
     For now, these special member functions will be implemented using the compiler's default implementation.
     the Vehicle class shows how to do this.
     
     You must implement these special member functions for all of the classes that derive from Vehicle.
     */
    
    /*
     In order to correctly construct an object in-place inside a vector, we must first reserve space for it.
     
     reserve how ever many cars, motorcycles, and trucks you'll create first
     */
    cars.reserve(3); //reserving room for 3 Car instances
    
    /*
     Now that we have reserved space for our UDT instances inside the vector, we can construct them in-place inside the vector.
     emplace_back is passed the constructor arguments for your UDT.
     
     use the vector member function 'emplace_back' to construct your car/truck/motorcycle instances in-place
     */
    cars.emplace_back("janice"); //constructing the first Car instance in-place in the cars vector
    
    /*
     construct 2 more Car instances via emplace_back.
     */
    cars.emplace_back("john");
    cars.emplace_back("james");

    /*
     now reserve and emplace_back your Trucks and Motorcyles
     */
    motorcycles.reserve(2);
    trucks.reserve(2);
    
    motorcycles.emplace_back("paul");
    motorcycles.emplace_back("matthew");    

    trucks.emplace_back("luke");
    trucks.emplace_back("thomas");  

    //assert(false);
    //add the cars, motorcycles and trucks to the highway using range-based for() loops: for( element : vec ) { ... }
    //be careful to not accidentally make element copies when iterating.

    for( Car& car : cars ) 
    {
        highway.addVehicle(&car);
    }

    for( Motorcycle& motorcycle : motorcycles ) 
    {
        highway.addVehicle(&motorcycle);
    }

    for( SemiTruck& semitruck : trucks ) 
    {
        highway.addVehicle(&semitruck);
    }

    HighwayPatrol cop;
    cop.scanHighway(&highway);

    std::cout << "done" << std::endl;

    return 0;
}


// replit

language = "cpp"
run = "clang++ -std=c++17 -Weverything -Wno-c++98-compat -Wno-missing-prototypes -Wno-padded -Wno-weak-vtables main.cpp Vehicle.cpp Car.cpp Highway.cpp HighwayPatrol.cpp Motorcycle.cpp SemiTruck.cpp && ./a.out"


// Car.cpp

#include "Car.h"

#include <iostream>

Car::Car(const std::string& n) : Vehicle(n) {}

void Car::closeWindows()
{
    setSpeed(70);
    std::cout << name << ": closing the windows!" << std::endl;
}

void Car::tryToEvade()
{
    setSpeed(0);
    std::cout << name << ": hello officer, what seems to be the problem?" << std::endl;
}

// Car.h

#pragma once

#include "Vehicle.h"

struct Car : public Vehicle
{
    Car(const std::string& s);
    void closeWindows();

    void tryToEvade();
};

// Highway.cpp

#include "Highway.h"
#include "Car.h"
#include "Motorcycle.h"
#include "SemiTruck.h"

//#include <cassert>

void Highway::changeSpeed(int newSpeed)
{
    speedLimit = newSpeed;
    for( auto* vehicle : vehicles )
    {
        vehicle->setSpeed(speedLimit);
    }
}

void Highway::addVehicleInternal(Vehicle* v)
{
    //assert(false);

    /*
    depending on the derived type, call the member function that doesn't evade the cops. 
    */
    if( auto* car = dynamic_cast<Car*>(v))
    {
        car->setSpeed(speedLimit);
    }
    else if( auto* motorcycle = dynamic_cast<Motorcycle*>(v) )
    {
        motorcycle->setSpeed(speedLimit);
    }
    else if( auto* semitruck = dynamic_cast<SemiTruck*>(v) )
    {
        semitruck->setSpeed(speedLimit);
    }
}

void Highway::removeVehicleInternal(Vehicle* v)
{
    //assert(false);

    /*
    depending on the derived type, call the member function that tries to evade the cops. 

    trucks pull over, but cars and bikes try to evade!!
    */
    if( auto* car = dynamic_cast<Car*>(v))
    {
        car->tryToEvade();
    }
    else if( auto* motorcycle = dynamic_cast<Motorcycle*>(v) )
    {
        motorcycle->tryToEvade();
    }
    else if( auto* semitruck = dynamic_cast<SemiTruck*>(v) )
    {
        //highwayPatrol->pullOver( semitruck, true, this )
    }    
}

void Highway::addVehicle(Vehicle* v)
{
    vehicles.push_back(v);
    addVehicleInternal(v);
}
void Highway::removeVehicle(Vehicle* v)
{
    vehicles.erase(std::remove(vehicles.begin(), 
                               vehicles.end(), 
                               v), 
                   vehicles.end());
    removeVehicleInternal(v);
}

// Highway.h

#pragma once

#include <vector>
#include <algorithm>
#include "Vehicle.h"

struct Highway
{
    friend struct HighwayPatrol;
    void changeSpeed(int newSpeed);
    void addVehicle(Vehicle* v);
    void removeVehicle(Vehicle* v);
private:
    void addVehicleInternal(Vehicle* v);
    void removeVehicleInternal(Vehicle* v);
    int speedLimit = 65;
    std::vector<Vehicle*> vehicles;
};

// HighwayPatrol.cpp

#include "HighwayPatrol.h"
#include <iostream>

HighwayPatrol::HighwayPatrol() : Vehicle("HighwayPatrol")
{

}

void HighwayPatrol::scanHighway(Highway* h)
{
    std::cout << name << ": scanning highway for speeders" << std::endl;

    for( size_t i = h->vehicles.size(); --i >= 0; )
    {
        auto* v = h->vehicles[i];
        if( v->speed > h->speedLimit + 5 )
        {
            pullOver(v, v->speed > (h->speedLimit + 15), h );
            h->changeSpeed(50); //slow down for the highway patrol
        }
    }
}

void HighwayPatrol::pullOver( Vehicle* v, bool willArrest, Highway* h )
{
    std::cout << "\n\n";
    std::cout << name << ": vehicle is traveling " << v->speed - h->speedLimit << " miles per hour over the speed limit" << std::endl;
    if( willArrest )
    {
        //print the vehicle type in this std::cout between "THE [" and "] PULL". 
        std::cout << name << ": YOU IN THE [ " << " ] PULL OVER AND SHOW YOUR HANDS" << std::endl;
        std::cout << "EVERYONE ELSE, SLOW DOWN!! \n\n\n";
        h->removeVehicle(v);
    }
}

// HighwayPatrol.h

#pragma once 

#include "Highway.h"
#include "Vehicle.h"
#include "Car.h"
#include "Motorcycle.h"
#include "SemiTruck.h"

struct HighwayPatrol : Vehicle 
{
    
    HighwayPatrol();
    void scanHighway(Highway* h);

    void pullOver( Vehicle* v, bool willArrest, Highway* h );
};

// Motorcycle.cpp

#include "Motorcycle.h"

Motorcycle::Motorcycle(const std::string& n) : Vehicle(n) {}

void Motorcycle::lanesplitAndRace( int topSpeed )
{
    setSpeed(topSpeed);
    std::cout << name << (topSpeed > 90 ? ": yeeehawwww" : ": zzzzzzzz") << std::endl;
}
void Motorcycle::tryToEvade()
{
    std::cout << name << ": you'll never take me alive, ya dirty coppers!" << std::endl;
    setSpeed(120);
}

void Motorcycle::setSpeed(int s)
{
    if( s < 90 )
    {
        //ignore the request to lower the speed
        std::cout<< name << ": uh, no.  i'm currently lane-splitting and racing" << std::endl;
    }
    else
    {
        Vehicle::setSpeed(s);
    }
}

// Motorcycle.h

#pragma once

#include <iostream>
#include <limits>

#include "Vehicle.h"

struct Motorcycle : public Vehicle
{
    Motorcycle(const std::string& n);
    
    void lanesplitAndRace( int topSpeed = std::numeric_limits<int>::max() );
    
    void tryToEvade() override;

    void setSpeed(int s) override;
};


// SemiTruck.cpp

#include "SemiTruck.h"

SemiTruck::SemiTruck(const std::string& n) : Vehicle(n) {}

// SemitTruck.h

#pragma once

#include "Vehicle.h"

struct SemiTruck : public Vehicle
{
    SemiTruck(const std::string& n);

};

// Vehicle.cpp

#include "Vehicle.h"

// Vehicle.h

#pragma once

#include <string>
#include <iostream>

struct Vehicle
{
    friend struct HighwayPatrol;
    Vehicle(const std::string& n) : name(n) { }
    
    virtual ~Vehicle() = default;
    Vehicle(const Vehicle&) = default;
    Vehicle& operator=(const Vehicle&) = default;
    
    virtual void setSpeed(int s)
    {
        std::cout << "\nHighway is adjusting " << name << "'s speed to " << s << " mph" << std::endl;
        speed = s;
    }
    
    virtual void tryToEvade()
    {
        std::cout << name << ": you'll never take me alive, ya dirty coppers!" << std::endl;
        setSpeed(100);
    }
protected:
    int speed = 0;
    std::string name;
};


